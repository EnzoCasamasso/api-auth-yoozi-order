// This is your Prisma schema file,
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator erd {
  provider = "prisma-erd-generator"
  theme = "forest"
  output = "../ERD.svg"
}
model Business {
  id                     String             @id @default(uuid())
  businessName           String             
  email                  String             @unique
  password               String
  sellers                Seller[]           @relation("businessSellers")
  products               Product[]          @relation("businessProducts")
  clients                Client[]           @relation("businessClient")
  orders                 Order[]            @relation("orderBusiness")
  orderItems             OrderItem[]        @relation("orderItems_business") 
  created_at             DateTime?
  deleted_at             DateTime?
}

model Seller {
  id                     String             @id @default(uuid())
  userName               String?            
  email                  String             @unique
  password               String
  business               Business           @relation("businessSellers", fields: [businessId], references: [id])
  businessId             String
  orderItems             OrderItem[]        @relation("orderItems_seller") 
  isAdmin                Boolean
  clients                Client[]           @relation("sellerClient")
}

model Product {
  id                    String              @id @default(uuid())
  productStock          ProductStock        @relation("productStock", fields: [productStockId], references: [id])
  productStockId        String              @unique
  description           String              
  salePrice             Float       
  coastPrice            Float
  business              Business            @relation("businessProducts", fields: [businessId], references: [id])
  businessId            String
  created_at            DateTime?
  deleted_at            DateTime?

  @@map("products")
}

model ProductStock {
  id                    String              @id @default(uuid())
  product               Product?            @relation("productStock")
  productId             String              @unique
  unityMeasurement      UnityMeasurement
  currentInventory      Int
  previousStock         Int?
  currentWeight         Float?
  previousWeight        Float?
  lastSale              DateTime?
  lastEntry             DateTime?
  lastModification      DateTime?
  lastEntryLogin        String?
  lastSaleLogin         String?
  deleted_at            DateTime?

  @@map("product_stocks")
}

enum UnityMeasurement {
  L
  M
  KG
  UN
}

model Client {
  id                    String              @id @default(uuid())
  name                  String
  orders                Order[]             @relation("clientOrder")
  clientContact         ClientContact?      @relation("clientContact")
  clientContactId       String?             @unique
  seller                Seller?             @relation("sellerClient", fields: [sellerId], references: [id])
  sellerId              String?   
  business              Business            @relation("businessClient", fields: [businessId], references: [id])
  businessId            String             
  created_at            DateTime?
  deleted_at            DateTime?

  @@map("clients")
}

model ClientContact {
  id                    String              @id @default(uuid())
  client                Client              @relation("clientContact", fields: [clientId], references: [id])
  clientId              String              @unique
  city                  String
  zipCode               String
  state                 String
  neighborhood          String
  numberHouse           String              @unique
  cellphoneNumber       String
}

model OrderItem {
  id                    String              @id @default(uuid())
  productName           String
  order                 Order               @relation("orderItems", fields: [orderId], references: [id])
  orderId               String
  amount                Int
  subtotal              Float
  seller                Seller              @relation("orderItems_seller", fields: [sellerId], references: [id])
  sellerId              String  
  business              Business            @relation("orderItems_business", fields: [businessId], references: [id])
  businessId            String
}

model Order {
  id                    String              @id @default(uuid())
  client                Client              @relation("clientOrder",  fields: [clientId], references: [id])
  clientId              String
  business              Business            @relation("orderBusiness", fields: [businessId], references: [id])
  businessId            String              @unique
  orderItems            OrderItem[]         @relation("orderItems")
  created_at            DateTime?
  deleted_at            DateTime?
  totalOrder            Float
}